/*
This is the lab assignment for FALL19 CSCI-GA 2621-001 Distributed Systems 
http://www.news.cs.nyu.edu/~jinyang/fa19-ds/labs/. 
For lab2, lab3, and lab4 part A, if you run all of the test cases 100 times, the pass rate should be 100/100.
Written By Xinmeng Li.
PLEASE DO NOT REPLICATE OR FURTHER DISTRIBUTE THE CODE.
*/
package mapreduce

import (
	"hash/fnv"
	"io/ioutil"
	"os"
	"encoding/json"
	"fmt"
)

// doMap manages one map task: it reads one of the input files
// (inFile), calls the user-defined map function (mapF) for that file's
// contents, and partitions the output into nReduce intermediate files.
func doMap(
	jobName string, // the name of the MapReduce job
	mapTaskNumber int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(file string, contents string) []KeyValue,
) {
	//
	// You will need to write this function.
	//
	// The intermediate output of a map task is stored as multiple
	// files, one per destination reduce task. The file name includes
	// both the map task number and the reduce task number. Use the
	// filename generated by reduceName(jobName, mapTaskNumber, r) as
	// the intermediate file for reduce task r. Call ihash() (see below)
	// on each key, mod nReduce, to pick r for a key/value pair.
	//
	contents, err := ioutil.ReadFile(inFile)
	if err != nil {
	    fmt.Printf("ERR read input file %v\n",err)
	}
	keyvalues:=mapF(inFile, string(contents))
	files := make([] *os.File, nReduce) 
	for i := 0; i < nReduce; i++ {
		filename:=reduceName(jobName, mapTaskNumber, i)
		// If the file doesn't exist, create it, or append to the file
		f, err := os.Create(filename)
		if err != nil {
		    fmt.Printf("ERR open file %v\n",err)
		}else{files[i]=f}
	}
	for i:=0;i<len(keyvalues);i++{
		key:=keyvalues[i].Key
		r:=ihash(key)%nReduce
	    enc := json.NewEncoder(files[r])
	    kv:=keyvalues[i]
	    if err := enc.Encode(&kv); err != nil {
	        fmt.Printf("ERR encode write to file %v\n",err)
	    }
	}
	for i:=0;i<len(files);i++{
		if err := files[i].Close(); err != nil {
	        fmt.Printf("ERR close file %v\n",err)
	    }
	}
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//

	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
